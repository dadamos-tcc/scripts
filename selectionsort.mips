.data
nova_linha: .asciiz  " "
vetor:  .word   0

# $s0: tamanho
# $s1: vetor
# $s2: i
# $s4: j
# $s5: min
# $s6: temp/vetor[i]
# $s7: vetor[j]
# $s8: vetor[min]
.text
main:
    li   $v0, 5                   # $v0 é o serviço
    syscall                        # lê um inteiro em $v0
    move   $s0, $v0                  # armazena o inteiro em $s0
    la   $s1, vetor               # posição inicial da vetor
    move   $s2, $zero                # posição inicial i = 0
inicia_vetor:
    beq  $s0, $s2, inicia_selection_sort # tamanho = posição corrente (i < tamanho)
    li   $v0, 5                   # $v0 é o serviço
    syscall                        # lê um inteiro em $v0
    sw   $v0, 0($s1)               # vetor[i] = entrada;
    addi $s2, $s2, 1               # i++
    addi $s1, $s1, 4               # próxima posição da vetor, cada word tem tamanho 4
    j    inicia_vetor

# ordena vetor (selection sort)
inicia_selection_sort:
    la   $s1, vetor               # posição inicial da vetor
    move   $s2, $zero                # posição inicial i = 0
selection_sort:
    li   $t0, 1
    sub  $t1, $s0, $t0              # tamanho - 1
    beq  $t1, $s2, inicia_imprime  # tamanho = posição corrente (i < tamanho - 1)
    move   $s5, $s2                  # min = i
    sll $t0, $s2, 2               # posição corrente vezes o tamanho da word (i * 4)
    add  $s1, $s1, $t0              # posição da vetor; primeira posição será 0 ( vetor[0]), segunda será 4 (vetor[0]), ...
    lw   $s6, 0($s1)               # temp = vetor[i]

inicia_loop_j:
    addi $s4, $s2, 1               # j = i + 1
loop_j:
    beq  $s0, $s4, troca           # tamanho = posição corrente (j < tamanho)
    la   $s1, vetor               # posição inicial da vetor
    sll $t0, $s4, 2               # posição corrente vezes o tamanho da word (j * 4)
    add  $s1, $s1, $t0              # posição da vetor
    lw   $s7, 0($s1)               # $s7 = vetor[j]

    la   $s1, vetor               # posição inicial da vetor
    sll $t0, $s5, 2               # posição corrente vezes o tamanho da word (min * 4)
    add  $s1, $s1, $t0              # posição da vetor
    lw   $s8, 0($s1)               # t3 = vetor[min]

    blt  $s7, $s8, min_j
    j segue_loop_j
min_j:
    move   $s5, $s4                  # min = j
segue_loop_j:
    addi $s4, $s4, 1               # j++
    j loop_j
troca:
    la   $s1, vetor               # volta para o começo da vetor
    sll $t0, $s5, 2               # posição corrente vezes o tamanho da word (min * 4)
    add  $s1, $s1, $t0              # posição da vetor
    lw   $t1, 0($s1)               # $t1 = vetor[min]
    sw   $s6, 0($s1)               # vetor[min] = temp;   
    la   $s1, vetor               # volta para o começo da vetor
    sll $t0, $s2, 2               # posição corrente vezes o tamanho da word (i * 4)
    add  $s1, $s1, $t0              # posição da vetor
    sw   $t1, 0($s1)               # vetor[i] = vetor[min];
loop_selection_sort:
    la   $s1, vetor               # vai para o início da vetor
    addi $s2, $s2, 1               # i++
    j    selection_sort

# imprime vetor
inicia_imprime:
    la   $s1, vetor               # posição inicial da vetor
    move   $s2, $zero                # posição inicial i = 0
imprime_vetor:
    beq  $s0, $s2, encerra         # tamanho = posição corrente (i < tamanho)
    lw   $a0, 0($s1)               # copia a posição corrente para $v0
    li   $v0, 1                   # $v0 é o serviço, 1 imprime inteiros
    syscall                        # imprime $v0
    la   $a0, nova_linha          # $v0 é a entrada do syscall
    li   $v0, 4                   # $v0 é o serviço, 4 imprime strings
    syscall                        # imprime $v0
loop_imprime:
    addi $s2, $s2, 1               # i++
    addi $s1, $s1, 4               # próxima posição da vetor, cada word tem tamanho 4
    j    imprime_vetor

# return 0;
encerra:
    la   $a0, nova_linha
    li   $v0, 4                    # $v0 é o serviço, 4 imprime strings
    syscall                        # encerra o programa
    jr  $ra